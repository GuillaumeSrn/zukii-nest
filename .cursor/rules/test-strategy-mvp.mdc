---
description: 
globs: 
alwaysApply: false
---
# Strat√©gie de Tests MVP Zukii

## ‚ö†Ô∏è AVERTISSEMENT POUR ASSISTANTS IA

**ATTENTION** : Ce fichier peut contenir des **informations obsol√®tes** ou **aspirationnelles** qui ne refl√®tent pas l'√©tat exact du code.

### üìä √âtat R√âEL actuel (v√©rifiable) :
- **Tests CRITICAL impl√©ment√©s** : 9 tests (AuthService: 6, BoardsService: 3)
- **Modules avec tests CRITICAL** : Auth ‚úÖ, Boards ‚úÖ, Blocks ‚ùå 
- **Performance r√©elle** : 9 tests CRITICAL en 4.4 secondes
- **Commande de v√©rification** : `npm run test -- --testNamePattern="CRITICAL" --verbose`

### üéØ Utilisation recommand√©e :
1. **Toujours v√©rifier** l'√©tat r√©el avec les commandes de test
2. **Ne pas faire confiance** aux exemples de code sans validation
3. **Prioriser** les observations directes du codebase
4. **Mettre √† jour** ce fichier quand des changements sont apport√©s

---

## üéØ Philosophie : "Test What Matters"

Au lieu de viser 100% de couverture, nous priorisons les **fonctionnalit√©s business-critical** pour un retour rapide et une validation efficace du MVP.

## üî• Fonctionnalit√©s OBLIGATOIREMENT test√©es

### 1. üîê S√âCURIT√â (CRITIQUE - 0 tol√©rance) ‚úÖ IMPL√âMENT√â
#### Tests obligatoires :
- **Authentification** : Login/register avec credentials valides/invalides
- **JWT Guards** : Protection routes sensibles + routes publiques autoris√©es
- **Permissions Board** : VIEW/EDIT/ADMIN avec validation ownership
- **Validation DTOs** : Injection SQL, XSS, donn√©es malform√©es
- **Bcrypt** : Hachage mots de passe + v√©rification

#### Exemples concrets impl√©ment√©s :
```typescript
describe('CRITICAL - Security Authentication', () => {
  it('CRITICAL - should reject invalid credentials (user not found)', async () => {
    await expect(authService.validateUser('wrong@email.com', 'wrong')).rejects.toThrow();
  });
});
```

### 2. üè¢ COLLABORATION CORE (CRITIQUE) ‚úÖ IMPL√âMENT√â
#### Tests obligatoires :
- **CRUD Boards** : Cr√©ation/modification/suppression par owner uniquement
- **Board Members** : Ajout/suppression avec validation permissions
- **Permissions granulaires** : VIEW (lecture), EDIT (modification), ADMIN (gestion)
- **Ownership validation** : Seul propri√©taire + admin peuvent g√©rer membres

#### Exemples concrets impl√©ment√©s :
```typescript
describe('CRITICAL - Access Control & Permissions', () => {
  it('CRITICAL - should reject unauthorized access (ownership validation)', async () => {
    // User non-owner ne peut pas acc√©der au board
  });
});
```

### 3. üß© SYST√àME BLOCK (MVP CRITIQUE) ‚ö†Ô∏è PARTIELLEMENT IMPL√âMENT√â
#### Tests obligatoires :
- **CRUD Blocks** : Cr√©ation/modification/suppression avec permissions
- **Relations Board-Block** : Int√©grit√© r√©f√©rentielle
- **Validation positions** : Coordonn√©es, dimensions, zIndex
- **Block Types** : TEXT/FILE/ANALYSIS avec content_id

#### ‚ö†Ô∏è STATUT R√âEL : Module impl√©ment√© mais tests pas encore marqu√©s CRITICAL
```typescript
// R√âALIT√â ACTUELLE : Tests existent mais sans marquage CRITICAL
describe('BlocksService', () => {
  it('should create a block successfully when user has edit permission', async () => {
    // Tests complets mais pas optimis√©s pour d√©veloppement rapide
  });
});

// √Ä FAIRE : Marquer les tests critiques
describe('BlocksService', () => {
  describe('CRITICAL - Block Permissions', () => {
    it('CRITICAL - should require EDIT permission to create block', async () => {
      // User avec permission VIEW seulement ne peut pas cr√©er
    });
  });
});
```

### 4. üìä UPLOAD & CONTENU (VALEUR M√âTIER) ‚ùå √Ä IMPL√âMENTER
#### Tests obligatoires FUTURS (quand modules cr√©√©s) :
- **Upload CSV** : Validation format, taille, headers
- **File validation** : Types MIME autoris√©s, limites s√©curit√©
- **Error handling** : Gestion √©checs upload, messages utilisateur
- **Content extraction** : M√©tadonn√©es automatiques

#### √Ä impl√©menter quand FileContentModule d√©velopp√© :
```typescript
describe('FileContentService - CRITICAL', () => {
  it('CRITICAL - should validate CSV format and size', async () => {
    // Rejet fichiers > 50MB ou format invalide
  });
  
  it('CRITICAL - should handle upload failures gracefully', async () => {
    // Messages d'erreur utilisateur appropri√©s
  });
});
```

### 5. ü§ñ INT√âGRATION IA (VALEUR AJOUT√âE) ‚ùå √Ä IMPL√âMENTER
#### Tests obligatoires FUTURS :
- **Microservice calls** : Timeout, retry, error handling
- **Analysis pipeline** : Input validation, output parsing
- **Template system** : Validation configurations IA

## ‚ùå Ce qu'on NE teste PAS (MVP)

### Fonctionnalit√©s report√©es :
- **Tests E2E complets** : Trop lents pour it√©ration rapide
- **Performance/Load testing** : Pas critique pour MVP
- **Tests UI d√©taill√©s** : Focus backend d'abord
- **Edge cases complexes** : Seulement si impact business
- **Mocks exhaustifs** : Seulement sur d√©pendances externes

### Modules secondaires :
- **EmailService** : Pas critique pour d√©mo
- **StatusService** : Logique simple, peu de risques
- **Logging/Monitoring** : Pas de logique m√©tier critique

## üßπ Gestion des tests existants

### ‚úÖ GARDER les tests actuels car :
1. **D√©j√† √©crits et maintenus** : Co√ªt de suppression > b√©n√©fice
2. **Couverture de s√©curit√©** : Validation edge cases utiles
3. **Documentation vivante** : Sp√©cification du comportement
4. **R√©gression protection** : √âvite les bugs lors de refactoring
5. **Temps d'ex√©cution acceptable** : 118 tests en < 4 secondes

### üéØ STRAT√âGIE HYBRIDE adopt√©e :
- **Tests CRITICAL** : Focus d√©veloppement et debugging
- **Tests complets** : Validation finale avant commit
- **Nouveaux modules** : Appliquer strat√©gie CRITICAL d√®s le d√©but

### üìã Commandes pratiques :
```bash
# D√©veloppement rapide - seulement critiques
npm run test -- --testNamePattern="CRITICAL"

# Validation compl√®te - tous les tests
npm run test

# CI/CD - tous les tests obligatoires
npm run test && npm run lint && npm run format
```

## üß™ Approche TDD Pragmatique

### 1. **Red-Green-Refactor** sur critiques uniquement
```typescript
// 1. RED : Test qui √©choue
it('CRITICAL - should reject unauthorized board access', async () => {
  await expect(boardService.findById(boardId, unauthorizedUserId))
    .rejects.toThrow(ForbiddenException);
});

// 2. GREEN : Code minimal qui passe
async findById(id: string, userId: string) {
  if (!await this.hasPermission(id, userId)) {
    throw new ForbiddenException();
  }
  // ...
}

// 3. REFACTOR : Am√©lioration sans casser les tests
```

### 2. **Mocks intelligents** pour isolation
```typescript
// Mock seulement les d√©pendances externes complexes
const mockBoardMembersService = {
  checkUserPermission: jest.fn().mockResolvedValue(true),
};

// Garder les entit√©s simples r√©elles pour validation
```

### 3. **Tests d'int√©gration** sur flux complets
```typescript
describe('User Journey - Board Collaboration', () => {
  it('CRITICAL - should complete full collaboration workflow', async () => {
    // 1. User cr√©e board
    // 2. User invite membre avec permission EDIT
    // 3. Membre cr√©e block
    // 4. Owner modifie permissions √† VIEW
    // 5. Membre ne peut plus cr√©er block
  });
});
```

## üìä M√©triques de succ√®s MVP

### Objectifs quantitatifs :
- **S√©curit√©** : 100% des endpoints prot√©g√©s test√©s avec CRITICAL
- **Business Logic** : 100% des CRUD critiques test√©s avec CRITICAL
- **Error Handling** : 100% des exceptions m√©tier test√©es
- **Performance** : Tests CRITICAL < 5 secondes (actuellement 4.4s), tous tests < 10 secondes

### Objectifs qualitatifs :
- **Confiance d√©ploiement** : Z√©ro r√©gression sur fonctionnalit√©s critiques
- **Debugging efficace** : Tests CRITICAL pointent pr√©cis√©ment les probl√®mes
- **Documentation vivante** : Tests servent de sp√©cification

## üöÄ R√®gles d'impl√©mentation

### Chaque nouveau module DOIT avoir :
1. **Tests service CRITICAL** : Logique m√©tier + gestion erreurs
2. **Tests controller CRITICAL** : Validation DTOs + codes HTTP
3. **Tests permissions CRITICAL** : S√©curit√© et autorisations
4. **Tests edge cases** : Seulement si impact business critique

### Structure obligatoire des tests :
```typescript
describe('ModuleService', () => {
  // Setup avec mocks appropri√©s
  beforeEach(async () => {
    const module = await Test.createTestingModule({
      providers: [
        ModuleService,
        { provide: getRepositoryToken(Entity), useValue: mockRepository },
        { provide: DependencyService, useValue: mockDependency },
      ],
    }).compile();
  });

  describe('CRITICAL - Security', () => {
    it('CRITICAL - should validate permissions', async () => {
      // Tests s√©curit√© obligatoires
    });
  });

  describe('CRITICAL - Business Logic', () => {
    it('CRITICAL - should handle core functionality', async () => {
      // Tests logique m√©tier critique
    });
  });

  describe('Error Handling', () => {
    it('should handle edge cases gracefully', async () => {
      // Tests gestion d'erreurs (non-critiques mais utiles)
    });
  });
});
```

## ‚ö° Commandes de validation

### D√©veloppement rapide :
```bash
npm run test:watch -- --testNamePattern="CRITICAL"  # Watch mode critiques seulement
npm run test -- --testNamePattern="CRITICAL"        # Ex√©cution rapide critiques
```

### Validation compl√®te avant commit :
```bash
npm run test                    # Tous les tests (critiques + edge cases)
npm run test:cov               # Couverture sur modules critiques
npm run lint && npm run format # Qualit√© code
```

### CI/CD pipeline :
```bash
npm run test && npm run lint && npm run format  # Validation compl√®te obligatoire
```

---

**R√©sultat attendu** : MVP robuste avec tests focalis√©s sur la valeur business, permettant it√©ration rapide tout en gardant la s√©curit√© des tests existants.
